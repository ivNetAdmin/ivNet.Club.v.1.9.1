var Fixture = angular.module('ivNet.Admin.Fixture', ['ngResource', 'ngSanitize', 'trNgGrid', 'xeditable', 'ui.bootstrap'])
.filter("fixtureDateField", function () {
    return function (combinedFieldValueUnused, item) {
        var d = item.DatePlayed;

        var curr_date = d.substr(8, 2);
        var curr_month = d.substr(5, 2);
        var curr_year = d.substr(0, 4);

        return curr_date + "/" + curr_month + "/" + curr_year;
    };
});

Fixture.factory('configuration', function ($resource) {
    return $resource('/api/club/configuration/:id', null,
    {
        'query': { method: 'Get', isArray: true },
    });
});

Fixture.factory('fixtures', function ($resource) {
    return $resource('/api/club/fixtures/:id', null,
    {
        'query': { method: 'Get', isArray: true }
    });
});

Fixture.factory('fixture', function ($resource) {
    return $resource('/api/club/fixtures/:id', null,
    {
        'query': { method: 'Get', isArray: false },
        'update': { method: 'Put' },
        'delete': { method: 'Delete' }
    });
});

Fixture.factory('report', function ($resource) {
    return $resource('/api/club/reports/:id', null,
    {
        'query': { method: 'Get', isArray: false },
        'update': { method: 'PUT' }
    });
});

Fixture.controller('AdminFixtureController', function ($scope, $filter, configuration, fixture, fixtures, report) {   

    $scope.search = function() {
        $('#loading-indicator').show();
        $('div.list').hide();
        $('div.detail').hide();
        $('div.season').hide();
        $('div.report').hide();

        fixtures.query({ year: $scope.season, team: $scope.team, date: $scope.fixtureDate },
            function(data) {
                $scope.fixtures = data;
                $('#loading-indicator').hide();
                $('div.list').show();
            },
            function(error) {
                $('#loading-indicator').hide();
                alert(error.data.Message + ' [' + error.data.MessageDetail + ']');
            });
    };

    $scope.add = function () {
        $('#loading-indicator').show();

        $('button.find').hide();
        $('button.season').hide();       
        $('div.list').hide();
        $('div.detail').hide();
        $('div.season').hide();
        $('div.report').hide();
        $('div.fixture-title').hide();
        $('a.back-to-list').hide();

        $scope.fixtureId = 0;
        getFixture($scope.fixtureId);
        $('div.detail').show();
        $('div.opposition').show();
    }

    $scope.addSeason = function () {
        $scope.fixtureAddedCount = 0;
        configuration.query({ id: 'opposition' },
             function (data) {
                 $scope.oppositionList = data;
                 $scope.opposition = $scope.oppositionList[0].Name;
             },
             function (error) {
                 $('#loading-indicator').hide();
                 alert(error.data.Message + ' [' + error.data.MessageDetail + ']');
             });

        $('button.find').hide();
        $('button.add').hide();
        $('div.list').hide();
        $('div.detail').hide();
        $('div.report').hide();
        $('div.fixture-title').hide();
        $('div.fixture-selector').hide();
        
        $('div.season').show();
    }

    $scope.cancel = function () {
        $('div.message').hide();       
        $('div.detail').hide();
        $('div.season').hide();
        $('div.opposition').hide();

        $('button.find').show();
        $('button.add').show();
        $('button.season').show();
        $('div.fixture-selector').show();
    };

    $scope.delete = function () {

        bootbox.confirm("Are you sure you want to delete this fixture? It will also delete all related stats...", function(result) {
            if (result) {
                $('div.message').hide();
                $('div.detail').hide();
                $('div.season').hide();
                $('div.opposition').hide();

                $('#loading-indicator').show();
                fixture.delete({ id: $scope.fixtureId },
                    function() {
                        $('#loading-indicator').hide();
                    },
                    function(error) {
                        $('#loading-indicator').hide();
                        alert(error.data.Message + ' [' + error.data.MessageDetail + ']');
                    });
                delete
                    $('button.find').show();
                $('button.add').show();
                $('button.season').show();
                $('div.fixture-selector').show();

            }
        });
    };

    $scope.editReport = function(item) {
        $('#loading-indicator').show();
        $('div.list').hide();
        $('div.detail').hide();
        $('div.season').hide();
        $('div.report').hide();

        $scope.fixtureId = item.FixtureId;

        report.query({ id: item.FixtureId },
            function (data) {
                $scope.editType = "report";
                $scope.title = formattedDate(data.DatePlayed) + ": " + data.HomeTeam + " v " + data.Opposition;
                $scope.result = data.Result;                
                $scope.resultType = data.ResultType;
                $scope.resultTypeList = data.ResultTypeList;
                $scope.opposition = data.Opposition;
                $scope.fixtureDate = $filter("date")(data.DatePlayed, 'yyyy-MM-dd');

                $scope.reportHtml = data.Html;
                CKEDITOR.instances['editor1'].setData($scope.reportHtml)
                $('#loading-indicator').hide();
                $('div.report').show();
            },
            function(error) {
                $('#loading-indicator').hide();
                alert(error.data.Message + ' [' + error.data.MessageDetail + ']');
            });
    };

    $scope.editFixture = function(item) {
        $('#loading-indicator').show();
        $('div.list').hide();
        $('div.detail').hide();
        $('div.season').hide();
        $('div.report').hide();

        $scope.fixtureId = item.FixtureId;
        getFixture(item.FixtureId);
        $('div.fixture-title').show();
        $('input.batsman-show').show()        
        $('div.detail').show();
    };

    $scope.backToList = function () {
        $('button.find').show();
        $('button.season').show();
        $('div.fixture').hide();
        $('div.opposition').hide();
        $('div.fixture-selector').show();
        $('div.list').show();
        $('div.fixture-title').show();
        $('div.message').hide();
    }

    $scope.addBattingStat = function() {
        $scope.newBattingStat = {
            Position: $scope.battingStats.length + 1,
            Name: '',
            Runs: 0,
            HowOut: null
        }

        $scope.battingStats.push($scope.newBattingStat);
    };

    $scope.addBowlingStat = function () {
        $scope.newBowlingStat = {
            Overs: 0,
            Maidens: 0,
            Runs: 0,
            Wickets: 0
        }

        $scope.bowlingStats.push($scope.newBowlingStat);
    };

    $scope.addFieldingStat = function () {
        $scope.newFieldingStat = {
            Name: '',
            Catches: 0,
            Stumpings: 0
        }

        $scope.fieldingStats.push($scope.newFieldingStat);
    };

    $scope.deleteBattingStat = function (id) {
        var index = 0;
        var filtered = $filter('filter')($scope.battingStats, function (stat) {
            if (id == stat.PlayerId) {
                $scope.battingStats.splice(index, 1);
            }
            index++;
        });
    };

    $scope.deleteBowlingStat = function (id) {
        var index = 0;
        var filtered = $filter('filter')($scope.bowlingStats, function (stat) {
            if (id == stat.PlayerId) {
                $scope.bowlingStats.splice(index, 1);
            }
            index++;
        });
    };

    $scope.deleteFieldingStat = function (id) {
        var index = 0;
        var filtered = $filter('filter')($scope.fieldingStats, function (stat) {
            if (id == stat.PlayerId) {
                $scope.fieldingStats.splice(index, 1);
            }
            index++;
        });
    };

    $scope.saveFixture = function () {

        if (!validFixture()) return;

        $('div.message').hide();
        $('#loading-indicator').show();
        $scope.reportHtml = CKEDITOR.instances['editor1'].getData();
        var data = {
            Type: $scope.editType,
            Batting: $scope.battingStats,
            Bowling: $scope.bowlingStats,
            Fielding: $scope.fieldingStats,
            Result: $scope.result,
            ResultType: $scope.resultType,
            Report: $scope.reportHtml,
            Team: $scope.team,
            Season: $scope.season,
            Date: $scope.fixtureDate,
            Opposition: $scope.opposition
        };

        fixture.update({ id: $scope.fixtureId }, data,
           function () {
               $('#loading-indicator').hide();
           },
           function (error) {
               alert(error.data.Message + ' [' + error.data.MessageDetail + ']');
           });

    };

    $scope.saveSeasonFixture = function() {
        var data = {
            Type: 'stat',
            Team: $scope.team,
            Date: $scope.fixtureDate,
            Opposition: $scope.opposition
        };

        fixture.update({ id: 0 }, data,
           function () {
               $('#loading-indicator').hide();
               $scope.fixtureAddedCount++;
               $scope.fixtureAddedMsg = "Fixture Added Ok (" + $scope.fixtureAddedCount + ")";
           },
           function (error) {
               alert(error.data.Message + ' [' + error.data.MessageDetail + ']');
           });
    };

    $scope.showResultType = function (resultType) {
        if(typeof resultType != 'undefined') return'Not set';
        var selected = [];
        if (resultType) {
            selected = $filter('filter')($scope.resultTypeList, { Name: resultType });
        }
        return selected.length ? selected[0].Name : 'Not set';
    };

    $scope.showHowOut = function (batStat) {
        if (typeof batStat != 'undefined') return 'Not set';
        var selected = [];
        if (batStat.HowOut) {
            selected = $filter('filter')($scope.howOutList, { Name: batStat.HowOut });
        }
        return selected.length ? selected[0].Name : 'Not set';
    }

    $scope.showOpposition = function (opposition) {
        if (typeof opposition != 'undefined') return 'Not set';
        var selected = [];
        if (opposition) {
            selected = $filter('filter')($scope.oppositionList, { Name: opposition });
        }
        return selected.length ? selected[0].Name : 'Not set';
    };

    init();

    function init() {
        $scope.fixtureAddedCount = 0;
        CKEDITOR.replace('editor1');

        $('div.fixture-selector').hide();
        $('div.list').hide();
        $('div.detail').hide();
        $('div.season').hide();
        $('div.report').hide();
        $('div.opposition').hide();
        $('div.message').hide();

        $('#loading-indicator').show();
        configuration.query({ id: 'hometeam' },
            function(data) {
                $scope.teamList = data;
                $scope.team = $scope.teamList[0].Name;

                configuration.query({ id: 'season' },
                    function(data) {
                        $scope.seasonList = data;
                        $scope.season = $scope.seasonList[0].Name;
                        $('div.fixture-selector').show();

                        fixtures.query({ year: $scope.season, team: $scope.team, date: $scope.fixtureDate, admin: true },
                            function (data) {                                
                                $scope.fixtures = data;
                                $('#loading-indicator').hide();
                                //$('div.list').show();
                            },
                            function(error) {
                                $('#loading-indicator').hide();
                                alert(error.data.Message + ' [' + error.data.MessageDetail + ']');
                            });
                    },
                    function(error) {
                        $('#loading-indicator').hide();
                        alert(error.data.Message + ' [' + error.data.MessageDetail + ']');
                    });
            },
            function(error) {
                $('#loading-indicator').hide();
                alert(error.data.Message + ' [' + error.data.MessageDetail + ']');
            });

    };

    function formattedDate(date) {
        var d = new Date(date || Date.now()),
            month = '' + (d.getMonth() + 1),
            day = '' + d.getDate(),
            year = d.getFullYear();

        if (month.length < 2) month = '0' + month;
        if (day.length < 2) day = '0' + day;

        return [day, month, year].join('/');
    }

    function getFixture(fixtureId) {

        fixture.query({ id: fixtureId },
            function(data) {

                $scope.editType = "stat";
                $scope.title = formattedDate(data.DatePlayed) + ": " + data.HomeTeam + " v " + data.Opposition;
                $scope.result = data.Result;
                $scope.fixtureDate = $filter("date")(data.DatePlayed, 'yyyy-MM-dd');
                $scope.resultType = data.ResultType;
                $scope.resultTypeList = data.ResultTypeList

                $scope.teamPlayerList = data.TeamPlayerList;

                $scope.howOutList = data.HowOutList;

                $scope.playerList = data.PlayerList;

                $scope.oppositionList = data.OppositionList;
                $scope.opposition = data.Opposition;

                $scope.show_batting_stat_fields = ['Position', 'Name', 'Runs', 'HowOut'];
                $scope.battingStats = data.FixtureStats.Batting;

                $scope.show_bowling_stat_fields = ['Name', 'Overs', 'Maidens', 'Runs', 'Wickets'];
                $scope.bowlingStats = data.FixtureStats.Bowling;

                $scope.show_fielding_stat_fields = ['Name', 'Catches', 'Stumpings'];
                $scope.fieldingStats = data.FixtureStats.Fielding;

                $('#loading-indicator').hide();
               
            },
            function(error) {
                $('#loading-indicator').hide();
                alert(error.data.Message + ' [' + error.data.MessageDetail + ']');
            });
    };

    function validFixture() {

        if (typeof tableform != 'undefined'
           && typeof tableform.opposition != 'undefined'
           && tableform.opposition.length > 0
           && tableform.opposition[0].selectedOptions.length > 0
           && tableform.opposition[0].selectedOptions[0].innerText.length > 0) {
            $scope.opposition = tableform.opposition[0].selectedOptions[0].innerText
        }

        if (typeof tableform != 'undefined'
           && typeof tableform.resultType != 'undefined'
           && tableform.resultType.length > 0
           && tableform.resultType[0].selectedOptions.length > 0
           && tableform.resultType[0].selectedOptions[0].innerText.length > 0) {
            $scope.resultType = tableform.resultType[0].selectedOptions[0].innerText
        }

        if (typeof tableform != 'undefined'
          && typeof tableform.result != 'undefined'
          && tableform.result.length > 0
          && tableform.result[0].value.length > 0) {
            $scope.result = tableform.result[0].value
        }

        var msg = "You must enter a value for the following; "
        $scope.message = msg;

        if (typeof $scope.team == 'undefined' || $scope.team.length == 0) $scope.message = $scope.message + "Home Team, "
        if (typeof $scope.season == 'undefined' || $scope.season.length == 0) $scope.message = $scope.message + "Season, "
        if (typeof $scope.fixtureDate == 'undefined' || $scope.fixtureDate.length == 0) $scope.message = $scope.message + "Fixture Date, "
        if (typeof $scope.opposition == 'undefined' || $scope.opposition.length == 0) $scope.message = $scope.message + "Opposition Team, "

        if ($scope.message != msg) {
            $('div.message').show();
            return false;
        }

        $scope.message = $scope.message.substr(0, $scope.message.length - 2);        
        return true;
    };
});

Fixture.controller('HelpController', function ($scope) {
    $scope.showModal = false;
    $scope.toggleModal = function () {
        $scope.showModal = !$scope.showModal;
    };
});

Fixture.directive('modal', function () {
    return {
        template: '<div class="modal fade">' +
            '<div class="modal-dialog">' +
              '<div class="modal-content">' +
                '<div class="modal-header">' +
                  '<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>' +
                  '<h4 class="modal-title">{{ title }}</h4>' +
                '</div>' +
                '<div class="modal-body" ng-transclude></div>' +
              '</div>' +
            '</div>' +
          '</div>',
        restrict: 'E',
        transclude: true,
        replace: true,
        scope: true,
        link: function postLink(scope, element, attrs) {
            scope.title = attrs.title;

            scope.$watch(attrs.visible, function (value) {
                if (value == true)
                    $(element).modal('show');
                else
                    $(element).modal('hide');
            });

            $(element).on('shown.bs.modal', function () {
                scope.$apply(function () {
                    scope.$parent[attrs.visible] = true;
                });
            });

            $(element).on('hidden.bs.modal', function () {
                scope.$apply(function () {
                    scope.$parent[attrs.visible] = false;
                });
            });
        }
    };
});

